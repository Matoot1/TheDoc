//Global Variables
  //This is what will hold the color for the stuff being drawn/
    color tempC;
  //Variable to choose the size of the brush.
    int brushSize=30;
  //Variable to hold size of each color selector box.
    int colorSquareSize=15;
  //Where the opacity slider starts
    int barTransY=15;
  //The base transparency. 
    float trans=15;
  //Array for the color selector boxes.
    int[] colorBoxes = {#42f445,#ff0000,#d0ff00,#000000,#ffffff};
  //Array for the keys to make them work smoothely.
    boolean[] keys = new boolean[3];

void setup() {
  
  //Setting the max framerate high so the drawings look smoother.
    frameRate(100000);
    
  //Setting fullscreen so the person has more space to draw.
  fullScreen();
  
  //Setting the background white
    background(255);
}

void draw() {
  //Draws the utility bar.
    Bar();    
  //Allows the user to paint
    Paint();
  //Allows user to draw shapes.
    shapePaint();
  //Allows user to exit out of program with visual aid.
    exitPaint();
}

void Bar() {
  
  //Setting strokes&otherstuff so everything inside this function is not affected by other functions.
    stroke(0);
    fill(255);
    strokeWeight(5);
    textSize(12);
    
  //Actual Top Bar
    rect(0, 0, width, 95);
    
  //Lines to seperate areas.
    strokeWeight(1);
    stroke(1);
    line(550,0,550,95);
    line(975,0,975,95);
    line(1180, 0, 1180, 95);
    line(1330,0,1330,95);
    
  //Shape Area
    fill(0);
    text("Shapes",575,15);
    text("1 for a square",575,25);
    text("2 for a triangle",575,35);
    text("hold SHIFT to fill the shapes in with the current color",575,45);
    
  //Loop for the color selector boxes
    for (int colorRectX=1200;colorRectX<=1280;colorRectX+=20) {
      fill(colorBoxes[(colorRectX-1200)/20]);
      rect(colorRectX,15,colorSquareSize,colorSquareSize);
    }
    
  //Calling in other functions that are in the bar.
     chooseThickness();
     chooseColor();
     opacitySlide();
     clearBoard();
}

void opacitySlide() {
  
  //Setting stroke&fill
    fill(0);
    stroke(1);
    
  //Indicates what area of bar
    text("Opacity", 1430,25);
    
  //Line for the slider
    line(1380, 15, 1380, 85);
    
  //Rectangle for the slider
    fill(255);
    rect(1367.5, barTransY, 25, 10);
    
  //Allows for slider to be moved up and down
    if (mousePressed==true&&((mouseX>1367.5&&mouseX<1382.5+25)&&(mouseY>barTransY-10&&mouseY<barTransY+10))) {
      barTransY=mouseY; 
      
      //Makes sure it doesnt go down too far.
        if (barTransY>75) {
          barTransY=75; 
        }
        
      //Makes sure it doesnt go up too far.
        if (barTransY<15) {
          barTransY=15;
        }
        
    //Sets the transparency of what your painting
      trans = barTransY;
    }
}

//Function to allow for choosing thickness of brush.
void chooseThickness() {
  
  //Setting stroke&fill
    stroke(1);
    fill(0);
    
  //Area to indicate the thickness options
    text("Thickness", 1115, 20);
    ellipse(1130, 25, 3, 3);
    ellipse(1130, 40, 10, 10);
    ellipse(1130, 75, 30, 30);
    fill(255);
    rect(999,10,60,20);
    fill(0);
    text("VERY BIG", 1000, 25);
    
  //Allows for user to change brush size when click in those areas.
    if (mousePressed==true){
      if ((mouseX>1127&&mouseX<1133)&&(mouseY>22&&mouseY<28)) {
        brushSize=3;
      }
      
      if ((mouseX>1120&&mouseX<1140)&&(mouseY>30&&mouseY<50)) {
        brushSize=10;
      }
      if ((mouseX>1100&&mouseX<1160)&&(mouseY>45&&mouseY<105)) {
        brushSize=30;
      }
      if ((mouseX>1000&&mouseX<1060)&&(mouseY>10&&mouseY<35)) {
        brushSize=300;
      }
    }
}

//Function to let users choose color of brush.
void chooseColor() {
  
  //Allows users to click inside parameters to change colors
    if (mousePressed==true) {
        if (mouseY>15&&mouseY<15+colorSquareSize) {
            if (mouseX>1200&&mouseX<1200+colorSquareSize) {
              tempC = #42f445;
            }
          
            if (mouseX>1220&&mouseX<1220+colorSquareSize) {
              tempC = #ff0000;
            }
          
            if (mouseX>1240&&mouseX<1240+colorSquareSize) {
              tempC = #d0ff00;
            }
          
            if (mouseX>1260&&mouseX<1260+colorSquareSize) {
              tempC = #000000;
            }
          
            if (mouseX>1280&&mouseX<1280+colorSquareSize) {
              tempC = #ffffff;
            }
          
            if (mouseX>1200&&mouseX<1200+colorSquareSize) {
              tempC = #42f445;
            }
        }
    }
}

//Function that lets the user paint.
void Paint() {
  
  //setting strokes&fill
    noStroke();
    fill(tempC, trans);
    
  //Allows user to paint when mouse is pressed.
    if (mousePressed==true&&mouseY>100) {
      ellipse(mouseX, mouseY, brushSize, brushSize);
    }
}

//Function to let the user easily clear the entire board
void clearBoard() {
  
  //Red box and text to indicate
    fill(0);
    text("CLEAR BOARD",250,15);
    fill(#ff0000);
    rect(240,25,100,45);
    
  //Clears the board by placing a white rectangle.
    if (mousePressed==true&&(mouseX>240&&mouseX<340)&&(mouseY>25&&mouseY<60)) {
      fill(255);
      rect(0,0,width,height);
    }
}

//Allows user to exit the program.
void exitPaint() {
  
  //setting stroke&fill
    stroke(0);
    strokeWeight(1);
    fill(#ff0000);
    
  //Red box with X to mark exit.
    rect(width-45,0,45,15);
    fill(0);
    line(width-45,0,width,15);
    line(width-45,15,width,0);
    
  //Exits when button is clicked
  if ((mousePressed==true)&&((mouseX>width-45&&mouseX<width)&&(mouseY>0&&mouseY<15))){
    exit(); 
  }
}

//Allows user to make shapes
void shapePaint() {
  
  //Makes it not filled in but when shift is pressed, it fills it in with selected color.
    if (keys[0]==false) {
      noFill();
      stroke(0);
      strokeWeight(1);
    } else {
      fill(tempC);
      }

  //Draws a square
    if (keys[1]==true) {
      rect(mouseX-50,mouseY-50,100,100);
    }
    
  //Draws a triangle
    if (keys[2]==true) {
      triangle(mouseX,mouseY-25,mouseX-25,mouseY+50,mouseX+25,mouseY+50);
    }
}




void keyPressed() {
  //changes booleans to true when key is pressed
    if (keyCode==SHIFT) {
      keys[0]=true;
    }
    if (key=='1'||key=='!') {
      keys[1]=true; 
    }
    if (key=='2'||key=='@') {
      keys[2]=true;
    }
}

void keyReleased() {
  //changes booleans to false when key is released
    if (keyCode==SHIFT) {
      keys[0]=false; 
    }
    if (key=='1'||key=='!') {
      keys[1]=false; 
    }
    if (key=='2'||key=='@') {
      keys[2]=false; 
    }
}
